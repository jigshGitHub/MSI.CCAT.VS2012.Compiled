@Html.Hidden("userId", (string)(@ViewBag.UserID))
@Html.Hidden("moduleId", (string)(@ViewBag.ModuleId))
@Html.Hidden("onlyDeficient", (bool)(@ViewBag.OnlyDeficient))

<style>
    .ui-tooltip, .arrow:after {
        background: black;
        border: 2px solid white;
    }

    .ui-tooltip {
        padding: 10px 20px;
        color: white;
        border-radius: 20px;
        font: bold 14px "Helvetica Neue", Sans-Serif;
        text-transform: uppercase;
        box-shadow: 0 0 7px black;
    }

    .arrow {
        width: 70px;
        height: 16px;
        overflow: hidden;
        position: absolute;
        left: 50%;
        margin-left: -35px;
        bottom: -16px;
    }

        .arrow.top {
            top: -16px;
            bottom: auto;
        }

        .arrow.left {
            left: 20%;
        }

        .arrow:after {
            content: "";
            position: absolute;
            left: 20px;
            top: -20px;
            width: 25px;
            height: 25px;
            box-shadow: 6px 5px 9px -9px black;
            -webkit-transform: rotate(45deg);
            -moz-transform: rotate(45deg);
            -ms-transform: rotate(45deg);
            -o-transform: rotate(45deg);
            tranform: rotate(45deg);
        }

        .arrow.top:after {
            bottom: -20px;
            top: auto;
        }
</style>
<div id="workspaceContainer">
    <table style="border: 0px solid red; width: 100%">
        <tr>
            <td colspan="3" style="width: 100%">
                <div id="moduleTitle" data-bind="with: selectedQuestionModule"><span data-bind="    text: name"></span></div>
            </td>
        </tr>
        <tr data-bind="visible: displayModuleMessage">
            <td colspan="3" style="width: 100%">
                <span data-bind="text: moduleMessage"></span>
            </td>
        </tr>
        <tr>
            <td colspan="3" style="width: 100%">
                <span data-bind="text: completeCountLabel" />
            </td>
        </tr>
        <tbody data-bind="foreach: questions">
            <tr>
                <td data-bind="text: serialNumber" style="width: 5%"></td>
                <td style="width: 5%">
                    <select style="width: 70px" data-bind="options: responses, optionsValue: 'Value', optionsCaption: ' ', optionsText: 'Value', value: response">
                    </select>
                </td>
                <td data-bind="text: text, attr: { title: toolTipText }"></td>
            </tr>
        </tbody>
    </table>
    <input type="button" data-bind="click: previousClick, visible: previousVisible" value="Previous" />&nbsp;<input type="button" data-bind="    click: nextClick, visible: nextVisible" value="Next" />    
</div>



@Scripts.Render("~/bundles/external")

<script src="~/Scripts/application.js" type="text/javascript"></script>
<script type="text/javascript">
    var answerOptions = [{ Text: 'Unsure', Value: '1' }, { Text: 'Slightly Agree', Value: '2' }, { Text: 'Agree', Value: '3' }, { Text: 'Strongly Agree', Value: '4' }, { Text: 'Fully Compliant', Value: '5' }, { Text: 'Not applicable', Value: 'N/A' }];
    var assessmentResponse = function (_id, _text, _toolTipText, _srNo, _response, _responseId, _userId, _recommendation) {
        var self = this;
        self.id = ko.observable(_id);
        self.response = ko.observable(_response);
        self.responses = ko.observableArray(answerOptions);
        self.text = ko.observable(_text);
        self.toolTipText = _toolTipText;
        self.serialNumber = ko.observable(_srNo);
        self.responseId = ko.observable(_responseId);
        self.userId = _userId;
        self.recommendation = _recommendation;
        self.response.subscribe(function (responseSelected) {
            //log(responseSelected);
            if (responseSelected != '' && responseSelected != undefined) {
                self.updateResponse(JSON.stringify({
                    ResponseId: self.responseId(),
                    Response: responseSelected,
                    UserId: self.userId
                }));
            }
        }, self);

        self.updateResponse = function (assessmentResponse) {
            $.ajax({
                url: baseUrl + '/api/Assessment/Post',
                type: "POST",
                data: assessmentResponse,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                },
                error: function (response, errorText) {
                    return false;
                }
            });
        }
    }
    var questionModule = function (_id, _name) {
        var self = this;
        self.id = ko.observable(_id);
        self.name = ko.observable(_name);
    }

    var pageViewModel = function (userId, moduleId, onlyDeficient) {
        var self = this;
        self.onlyDeficient = onlyDeficient;
        self.displayModuleMessage = ko.observable(self.onlyDeficient);
        self.moduleMessage = ko.observable('');
        self.userId = userId;
        self.modules = ko.observableArray([]);
        self.totalQuestionCount = ko.observable();

        self.questionsDisplayCount = 10;
        self.questionsDisplayStartIndex = ko.observable(0);
        self.questionsDisplayEndIndex = ko.observable(self.questionsDisplayCount);
        self.questionsCollection = ko.observableArray([]);
        self.completeCount = ko.computed(function () {
            var count = 0;
            ko.utils.arrayForEach(self.questionsCollection(), function (answer) {
                if (answer.response())
                    count++;
            });
            return count;
        }, self);
        self.completeCountLabel = ko.computed(function () {
            return 'Complete ' + self.completeCount() + ' / ' + self.totalQuestionCount();
        }, self);
        self.selectedQuestionModule = ko.computed(function () {
            var module;
            $.each(self.modules(), function (i, item) {
                if (item.id() == moduleId) {
                    module = item;
                    return;
                }
            });
            return module;
        }, self);
        self.questions = ko.computed(function () {
            return self.questionsCollection.slice(self.questionsDisplayStartIndex(), self.questionsDisplayEndIndex());
        }, self);

        self.nextClick = function () {
            self.questionsDisplayStartIndex(self.questionsDisplayStartIndex() + self.questionsDisplayCount);
            self.questionsDisplayEndIndex(self.questionsDisplayEndIndex() + self.questionsDisplayCount);
        };

        self.nextVisible = ko.computed(function () {
            return (self.questionsDisplayEndIndex() <= self.totalQuestionCount());
        }, self);

        self.previousClick = function () {
            self.questionsDisplayStartIndex(self.questionsDisplayStartIndex() - self.questionsDisplayCount);
            self.questionsDisplayEndIndex(self.questionsDisplayEndIndex() - self.questionsDisplayCount);
        };

        self.previousVisible = ko.computed(function () {
            return (self.questionsDisplayStartIndex() > 0 && self.questionsDisplayStartIndex() <= self.totalQuestionCount());
        }, self);

        //self.selectedModule = ko.computed(function () { return self.modules[0]; }, self);

        self.initialize = function () {
            self.loadModules();
            self.loadQuestions();
        }

        self.loadModules = function () {

            showProgress("Getting Module details...Please wait.");
            $.ajax({
                url: baseUrl + '/api/QuestionModule/Get',
                type: 'GET',
                contentType: 'application/json',
                async: false,
                dataType: 'json',
                success: function (data) {
                    if (data.length > 0) {
                        $.each(data, function (i, item) {
                            //log(item)
                            self.modules.push(new questionModule(item.Id, item.Name));
                        });
                        hideProgress();
                    }
                },
                error: function (xhr, status, somthing) {
                    log(status);
                }
            });
        }
        self.loadQuestions = function () {
            //log(self.selectedQuestionModule());
            showProgress("Getting Questions...Please wait.");
            var url = baseUrl + '/api/Assessment/';
            //log(self.onlyDeficient);
            if (self.onlyDeficient == 'true') {
                url = url + 'GetDeficients';
                self.moduleMessage('The system has identified the following areas of weakness based upon your responses.');
            }
            else
                url = url + 'Get';

            $.ajax({
                url: url,
                type: 'GET',
                contentType: 'application/json',
                data: { moduleId: self.selectedQuestionModule().id(), userId: userId },
                dataType: 'json',
                success: function (data) {
                    self.totalQuestionCount(data.length);
                    //log(data);
                    if (data.length > 0) {
                        $.each(data, function (i, item) {
                            self.questionsCollection.push(new assessmentResponse(item.QuestionId, item.Question, item.QuestionTooltip, item.SerialNumber, item.Response, item.ResponseId, userId, item.Recommendation));
                        });
                    }
                    hideProgress();
                },
                error: function (xhr, status, somthing) {
                    log(status);
                }
            });
        };
    }

    $(document).ready(function () {
        var vm = new pageViewModel($('#userId').val(), $('#moduleId').val(), $('#onlyDeficient').val());
        vm.initialize();
        ko.applyBindings(vm, $('#workspaceContainer')[0]);
        $('#workspaceContainer').tooltip({
            position: {
                my: "center top",
                //at: "center top",
                using: function (position, feedback) {
                    $(this).css(position);
                    $("<div>")
                      .addClass("arrow")
                      .addClass(feedback.vertical)
                      .addClass(feedback.horizontal)
                      .appendTo(this);
                }
            }
        });
    });
</script>
