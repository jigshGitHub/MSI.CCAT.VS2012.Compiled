<div id="clubSearch" class="container-fluid">
    <div class="row-fluid">
        <div class='page-title'>Manage Users</div>
    </div>
    <br />
    <script type="text/x-kendo-template" id="template">
                <div class="toolbar"><a class="k-button k-button-icontext k-grid-add" href=""><span class="k-icon k-add"></span>Add new record</a>
                </div>
    </script>

    <div class="row-fluid" style="margin-top: 10px">
        <div id="searchGrid" class="k-content">
            <div id="usersGrid"></div>
        </div>
    </div>
    <div id="editContainer" data-bind='visible: showEditContainer' class="modal hide fade">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h3>Add/Update User:</h3>
        </div>
        <div class="modal-body">
            <table style="width: 100%">
                <tr>
                    <td style="width: 25%">Username
                    </td>
                    <td style="width: 1%">:
                    </td>
                    <td style="width: 74%">
                        <input type="text" data-bind="enable: false, value: userName" />
                    </td>
                </tr>
                <tr>
                    <td style="width: 25%">First Name
                    </td>
                    <td style="width: 1%">:
                    </td>
                    <td style="width: 74%">
                        <input type="text" data-bind="value: firstName" />
                        <span class="label label-important"><small>Required</small></span>
                    </td>
                </tr>
                <tr>
                    <td>Last Name
                    </td>
                    <td>:
                    </td>
                    <td>
                        <input type="text" data-bind="value: lastName" />
                        <span class="label label-important"><small>Required</small></span>
                    </td>
                </tr>
                <tr>
                    <td>Email
                    </td>
                    <td>:
                    </td>
                    <td>
                        <input type="text" data-bind="value: email" />
                        <span class="label label-important"><small>Required</small></span>
                    </td>
                </tr>
                <tr>
                    <td>Role
                    </td>
                    <td>:
                    </td>
                    <td>
                        <select data-bind="kendoDropDownList: { dataTextField: 'text', optionLabel: ' ', dataValueField: 'value', data: roles, value: role }"/>
                    </td>
                </tr>
                <tr data-bind="visible: makeAgenciesVisible">
                    <td data-bind="text: roleKeyTitle"></td>
                    <td>:
                    </td>
                    <td>
                        <select data-bind="kendoDropDownList: { dataTextField: 'Text', optionLabel: ' ', dataValueField: 'Value', data: agencies, value: agencySelected }"/>
                    </td>
                </tr>
                <tr data-bind="visible: makeAgencyManagerSelectionVisible">
                    <td>Agency Manager</td>
                    <td>:
                    </td>
                    <td>
                        <select data-bind="kendoDropDownList: { dataTextField: 'Text', optionLabel: ' ', dataValueField: 'Value', data: agencyManagers, value: agencyManagerSelected }"/>
                    </td>
                </tr>
                <tr data-bind="visible: makeLawFirmVivible">
                    <td data-bind="text: roleKeyTitle"></td>
                    <td>:
                    </td>
                    <td>
                        <select data-bind="kendoDropDownList: { dataTextField: 'Text', optionLabel: ' ', dataValueField: 'Value', data: lawFirms, value: lawFirmSelected }"/>
                    </td>
                </tr>
                <tr data-bind="visible: makeCreditIssuersVisible">
                    <td data-bind="text: roleKeyTitle"></td>
                    <td>:
                    </td>
                    <td>
                        <select data-bind="kendoDropDownList: { dataTextField: 'Text', optionLabel: ' ', dataValueField: 'Value', data: creditIssuers, value: creditIssuerSelected }"/>
                    </td>
                </tr>
                <tr data-bind="visible: makeDebtOwnersVisible">
                    <td data-bind="text: roleKeyTitle"></td>
                    <td>:
                    </td>
                    <td>
                        <select data-bind="kendoDropDownList: { dataTextField: 'Text', optionsCaption: ' ', dataValueField: 'Value', data: debtOwners, value: debtOwnerSelected }"/>
                    </td>
                </tr>
                <tr>
                    <td colspan="3" style="text-align: center">
                        <div data-bind="fadeVisible: showMessage" style="background-color: #1f497d; color: #fff">
                            <span data-bind="text: message"></span>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
        <div class="modal-footer">
            <a href="#" class="btn" data-bind="visible: saveVisible, click: saveCancel">Close</a>
            <a href="#" class="btn btn-primary" data-bind="visible: saveVisible, click: save">Save changes</a>
        </div>
    </div>
</div>

@Scripts.Render("~/bundles/external")

<script src="~/Scripts/application.js" type="text/javascript"></script>
@* Kendo Grid Data Source *@


@* Kendo Grid Data *@



@* Document Ready *@
<script>
    function userViewModel(userId) {
        var self = this;
        self.userId = userId;
        self.userName = ko.observable('')
        self.firstName = ko.observable('');
        self.lastName = ko.observable('');
        self.email = ko.observable('');
        self.role = ko.observable('');
        self.agencySelected = ko.observable('');
        self.roleKeyTitle = ko.observable('');
        self.lawFirmSelected = ko.observable('');
        self.creditIssuerSelected = ko.observable('');
        self.debtOwnerSelected = ko.observable('');
        self.agencyManagerSelected = ko.observable();

        self.agencies = ko.computed(function () {
            var localAgencies = [];
            $.ajax({
                url: baseUrl + '/api/Lookup/',
                type: 'GET',
                contentType: 'application/json',
                data: { id: 'Agencies' },
                dataType: 'json',
                async: false,
                success: function (data) {
                    //log(data.length);
                    if (data.length > 0) {
                        $.each(data, function (i, item) {
                            //log(item.Text);
                            localAgencies.push(item);
                        });
                        log('agencies loaded...');
                    }
                },
                error: function (xhr, status, somthing) {
                    log(status);
                }
            });
            return localAgencies;
        }, self);

        self.lawFirms = ko.computed(function () {
            var localLawFirms = [];
            $.ajax({
                url: baseUrl + '/api/Lookup/',
                type: 'GET',
                contentType: 'application/json',
                data: { id: 'LawFirm' },
                dataType: 'json',
                async: false,
                success: function (data) {
                    //log(data.length);
                    if (data.length > 0) {
                        $.each(data, function (i, item) {
                            //log(item.Text);
                            localLawFirms.push(item);
                        });
                        log('lawFirms loaded...');
                    }
                },
                error: function (xhr, status, somthing) {
                    log(status);
                }
            });
            return localLawFirms;
        }, self);

        self.creditIssuers = ko.computed(function () {
            var localCreditIssuers = [];
            $.ajax({
                url: baseUrl + '/api/Lookup/',
                type: 'GET',
                contentType: 'application/json',
                data: { id: 'CreditIssuers' },
                dataType: 'json',
                async: false,
                success: function (data) {
                    //log(data.length);
                    if (data.length > 0) {
                        $.each(data, function (i, item) {
                            //log(item.Text);
                            localCreditIssuers.push(item);
                        });
                        log('creditIssuers loaded...');
                    }
                },
                error: function (xhr, status, somthing) {
                    log(status);
                }
            });
            return localCreditIssuers;
        }, self);

        self.debtOwners = ko.computed(function () {
            var localDebtOwners = [];
            $.ajax({
                url: baseUrl + '/api/Lookup/',
                type: 'GET',
                contentType: 'application/json',
                data: { id: 'DebtOwner' },
                dataType: 'json',
                async: false,
                success: function (data) {
                    //log(data.length);
                    if (data.length > 0) {
                        $.each(data, function (i, item) {
                            //log(item.Text);
                            localDebtOwners.push(item);
                        });
                        log('debtOwners loaded...');
                    }
                },
                error: function (xhr, status, somthing) {
                    log(status);
                }
            });
            return localDebtOwners;
        }, self);

        self.agencyManagers = ko.observableArray([]);

        self.fill = function (id, name, fname, lname, email, role, roleKeyVal) {
            self.userId = id;
            self.userName(name)
            self.firstName(fname);
            self.lastName(lname);
            self.email(email);
            self.role(role);
            if (role != undefined) {
                if (role == 'CollectionAgency' || role == 'AgencyCollector' || role == 'AgencyManager' || role == 'AgencyCompliance')
                    self.agencySelected(roleKeyVal);
                else if (role == 'CollectionLawfirm')
                    self.lawFirmSelected(roleKeyVal);
                else if (role == 'CreditIssuer')
                    self.creditIssuerSelected(roleKeyVal);
                else
                    self.debtOwnerSelected(roleKeyVal);
            }
        }

        self.showMessage = ko.observable(false);
        self.message = ko.observable('');

        self.saveVisible = ko.observable(false);
        self.createNewVisible = ko.observable(true);
        self.makeAgenciesVisible = ko.observable(false);
        self.makeLawFirmVivible = ko.observable(false);
        self.makeCreditIssuersVisible = ko.observable(false);
        self.makeDebtOwnersVisible = ko.observable(false);
        self.makeAgencyManagerSelectionVisible = ko.computed(function () { return (self.role() == 'AgencyCollector'); }, self);

        self.roles = ko.computed(function () {
            var applicationRoles = [];
            $.ajax({
                url: baseUrl + '/Account/GetApplicationRoles/',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                async: false,
                success: function (data) {
                    //log(data);
                    //applicationRoles.push({ text: 'Select Role', value: '' });
                    if (data.length > 0) {
                        $.each(data, function (i, item) {
                            //console.log(item);
                            applicationRoles.push({ text: item, value: item });
                        });
                    }
                },
                error: function (response, errorText) {
                    log(errorText);
                }
            });
            return applicationRoles;
        }, self);
        self.showEditContainer = ko.observable(false);
        self.role.subscribe(function (roleSelected) {
            self.makeAgenciesVisible(false);
            self.makeLawFirmVivible(false);
            self.makeCreditIssuersVisible(false);
            self.makeDebtOwnersVisible(false);
            if (roleSelected == 'CollectionAgency' || roleSelected == 'AgencyCollector' || roleSelected == 'AgencyManager' || roleSelected == 'AgencyCompliance') {
                self.roleKeyTitle('Collection Agency');
                if (roleSelected == 'AgencyCollector' || roleSelected == 'AgencyManager' || roleSelected == 'AgencyCompliance') {
                    self.agencySelected('DCI');
                    if (roleSelected == 'AgencyCollector' && self.agencyManagers().length == 0) {
                        $.ajax({
                            url: baseUrl + '/Account/GetAllAgencyManagersUsers/',
                            type: 'GET',
                            contentType: 'application/json',
                            dataType: 'json',
                            async: false,
                            success: function (data) {
                                //log(data.length);
                                if (data.length > 0) {
                                    self.agencyManagers.push({Text:'Select...', Value:''});
                                    $.each(data, function (i, item) {
                                        log(item);
                                        self.agencyManagers.push(item);
                                    });
                                    log('agencyManagers loaded...');
                                    self.agencyManagerSelected('');
                                }
                            },
                            error: function (xhr, status, somthing) {
                                log(status);
                            }
                        });
                    }
                }
                self.makeAgenciesVisible(true);
            }
            else if (roleSelected == 'CollectionLawfirm') {
                self.roleKeyTitle('Collection Lawfirm');
                self.makeLawFirmVivible(true);
            }
            else if (roleSelected == 'CreditIssuer') {
                self.roleKeyTitle('Credit Issuer');
                self.makeCreditIssuersVisible(true);
            }
            else if (roleSelected == 'DebtOwner') {
                self.roleKeyTitle('Debt Owner');
                self.makeDebtOwnersVisible(true);
            }
            else {
                self.roleKeyTitle('');
                self.makeAgenciesVisible(false);
            }
        }.bind(self));

        self.save = function () {
            var roleEntityValue;
            //alert(self.firstName() + '' + self.lastName() + '' + self.email())
            if (self.firstName() == '' || self.firstName() == undefined || self.lastName() == '' || self.lastName() == undefined || self.email() == '' || self.email() == undefined) {
                //alert('First Name, Last Name and Email is required');
                showNoti_.error('First Name, Last Name and Email is required!!', false);
                return false;
            }
            if (self.makeAgenciesVisible()) {
                if ((self.role() == 'CollectionAgency' || self.role() == 'AgencyCollector' || self.role() == 'AgencyManager' || self.role() == 'AgencyCompliance') && self.agencySelected() == '' || self.agencySelected() == undefined) {
                    //alert('Collection Agency value is required');
                    showNoti_.error('Collection Agency value is required!!', false);
                    return false;
                }
                else if (self.role() == 'AgencyCollector' && self.agencyManagerSelected() == '') {
                    showNoti_.error('Agency Manager value is required!!', false);
                    return false;
                }
                roleEntityValue = self.agencySelected()
            }
            else if (self.makeLawFirmVivible()) {
                if (self.role() == 'CollectionLawfirm' && (self.lawFirmSelected() == '' || self.lawFirmSelected() == undefined)) {
                    //alert('Collection LawFirm value is required');
                    showNoti_.error('Collection LawFirm value is required!!', false);
                    return false;
                }
                roleEntityValue = self.lawFirmSelected()
            }
            else if (self.makeCreditIssuersVisible()) {
                if (self.role() == 'CreditIssuer' && (self.creditIssuerSelected() == '' || self.creditIssuerSelected() == undefined)) {
                    //alert('Credit Issuer value is required');
                    showNoti_.error('Credit Issuer value is required!!', false);
                    return false;
                }
                roleEntityValue = self.creditIssuerSelected()
            }
            else if (self.makeDebtOwnersVisible()) {
                if (self.role() == 'DebtOwner' && (self.debtOwnerSelected() == '' || self.debtOwnerSelected() == undefined)) {
                    //alert('Debt Owner value is required');
                    showNoti_.error('Debt Owner value is required!!', false);
                    return false;
                }
                roleEntityValue = self.debtOwnerSelected()
            }
            var json = JSON.stringify({
                userId: self.userId, firstName: self.firstName(), lastName: self.lastName(), email: self.email(), role: self.role(), roleEntityValue: roleEntityValue, agencyManager: self.agencyManagerSelected()
            });
            $.ajax({
                url: baseUrl + '/Account/UpdateUser/',
                type: "POST",
                data: json,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                async: false,
                success: function (response) {
                    log(response);
                    self.clear();
                    //if (self.userId == '') {
                    //    location.reload();
                    //}
                    self.showMessage(true);
                    self.message('User account data has been added or updated');
                    var grid = $("#usersGrid").data("kendoGrid");
                    //console.log(grid);
                    grid.dataSource.page(1);
                    grid.dataSource.read();                    
                },
                error: function (response, errorText) {
                    log(errorText);
                }
            });
        }
        self.clear = function () {
            self.fill('', '', '', '', '', undefined, undefined);
            self.makeAgenciesVisible(false);
            self.makeCreditIssuersVisible(false);
            self.makeDebtOwnersVisible(false);
            self.makeLawFirmVivible(false);
            self.roleKeyTitle('');
            self.agencySelected('');
            self.creditIssuerSelected('');
            self.lawFirmSelected('');
            self.debtOwnerSelected('');
            self.agencyManagerSelected('');
            self.agencyManagers([]);
        }
        self.saveCancel = function () {
            self.clear();
            self.saveVisible(false);
            //self.createNewVisible(true);
            $('#editContainer').modal('hide');
        }
    }
    ko.bindingHandlers.fadeVisible = {
        init: function (element, valueAccessor) {
            var value = valueAccessor();
        },
        update: function (element, valueAccessor) {
            var value = valueAccessor();
            ko.utils.unwrapObservable(value) ? $(element).fadeIn(3000, function () {
                $(element).fadeOut(5000);
                value(false)
            }) : $(element).fadeOut();
        }
    };
    $(document).ready(function () {
        $(document).ready(function () {

            var dataSource = new kendo.data.DataSource({
                    transport: {
                        read: {
                            url: baseUrl + '/Account/GetAllUsers',
                            dataType: "json"
                        }
                    },
                    batch: true,
                    pageSize: 10,
                    schema: {
                        model: {
                            id: "UserId",
                            fields: {
                                FirstName: { type: "string", validation: { required: true } },
                                LastName: { type: "string", validation: { required: true } },
                                Email: { validation: { required: true } },
                                UserName: { type: "string", validation: { required: true }, editable: false },
                                Role: { type: "string" },
                                RoleKeyValue: { type: "string" }
                            }
                        }
                    }
                });

            $("#usersGrid").kendoGrid({
                dataSource: dataSource,
                pageable: true,
                height: 430,
                toolbar: kendo.template($("#template").html()),
                columns: [
                    { field: "FirstName", title: "First Name", width: "100px" },
                    { field: "LastName", title: "Last Name", width: "100px" },
                    { field: "Email", title: "Email", width: "100px" },
                    { field: "UserName", title: "User Name", width: "100px" },
                    //{ field: "Role", title: "Role", values: applicationRoles, width: "100px" },
                    {
                        command: [
                                  { id: "edit", name: "edit", template: "<a class='k-button k-grid-edit editsa' title='View/Edit' style='min-width:16px;'><span class='k-icon k-edit'></span></a>" },
                        ], title: " ", width: "30px"
                    }],
            });
            var uvm = new userViewModel('');
            ko.applyBindings(uvm, $('#editContainer')[0]);
            @*Edit record*@
            $('#usersGrid').on('click', '.editsa', function (e) {
                e.preventDefault();
                var dataItem = $("#usersGrid").data("kendoGrid").dataItem($(this).closest("tr"));
                @*Now let us clear what we have on this page*@
                console.log(dataItem);
                $('#editContainer').modal();
                uvm.showEditContainer(true);
                uvm.fill(dataItem.UserId, dataItem.UserName, dataItem.FirstName, dataItem.LastName, dataItem.Email, dataItem.Role, dataItem.RoleKeyValue);
                uvm.saveVisible(true);
            });

            $('#usersGrid').on('click', '.k-grid-add', function (e) {
                e.preventDefault();
                //console.log('Adding new record');
                $('#editContainer').modal();
                uvm.showEditContainer(true);
                uvm.fill('', '', '', '', '', '', '');
                uvm.saveVisible(true);
            });
        });

    });
</script>
